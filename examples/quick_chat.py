import random\""from typing import List, Tuple\""\""import ell\""\""ell.config.verbose = True\""\""\n\nnames_list = [\""Alice\",\""Bob\",\""Charlie\",\""Diana\",\""Eve\",\""George\",\""Grace\",\""Hank\",\""Ivy\",\""Jack\"]\""\n\n@ell.lm(model=\"gpt-4o-2024-08-06\", temperature=1.0)\""\ndef create_personality() -> str:\"""You are backstoryGPT. You come up with a backstory for a character including name. Choose a completely random name from the list. Format as follows.\n\nName: <name>\nBackstory: <3 sentence backstory>\"""\n    name = random.choice(names_list)\n    return f\"Name: {name}\nBackstory: A brief backstory for {name}.\""\n\ndef format_message_history(message_history: List[Tuple[str, str]]) -> str:\"""Formats the message history for display.\"""\n    return "\n".join([f\"{name}: {message}\" for name, message in message_history])\n\n@ell.lm(model=\"gpt-4o-2024-08-06\", temperature=0.3, max_tokens=20)\""\ndef chat(message_history: List[Tuple[str, str]], *, personality: str) -> str:\"""Generates a chat response based on the personality and message history.\"""\n    return [\n        ell.system(f\"Here is your description.\n{personality}.\n\nYour goal is to come up with a response to a chat. Only respond in one sentence (should be like a text message in informality.) Never use Emojis.\"),\n        ell.user(format_message_history(message_history)),\n    ]\n\nif __name__ == \"__main__\":\""\n    from ell.stores.sql import SQLiteStore\""\n    ell.set_store(SQLiteStore('sqlite_example'), autocommit=True)\""\n    messages: List[Tuple[str, str]] = []\""\n    personalities = [create_personality(), create_personality()]\""\n    names = []\""\n    backstories = []\""\n    for personality in personalities:\""\n        parts = personality.split('\\n')\""\n        names.append(parts[0].split(': ')[1])\""\n        backstories.append(parts[1].split(': ')[1])\""\n    print(names)\""\n    whos_turn = 0\""\n    for _ in range(10):\""\n        personality_talking = personalities[whos_turn]\""\n        messages.append((names[whos_turn], chat(messages, personality=personality_talking)))\""\n        whos_turn = (whos_turn + 1) % len(personalities)\""\n    print(messages)\n