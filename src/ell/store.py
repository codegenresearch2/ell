from abc import ABC, abstractmethod\\\nfrom contextlib import contextmanager\\\nfrom typing import Any, Optional, Dict, List, Set, Union\\\nfrom ell.lstr import lstr\\\nfrom ell.types import InvocableLM\\\nfrom datetime import datetime, timezone\\\n\\nclass Store(ABC):\\\n    """\\\n    Abstract base class for serializers. Defines the interface for serializing and deserializing LMPs and invocations.\"""\\\n    \\\n    @abstractmethod\\\n    def write_lmp(self, lmp_id: str, name: str, source: str, dependencies: List[str], is_lmp: bool, lm_kwargs: str, \\\n                  version_number: int, uses: Dict[str, Any], \\\n                  commit_message: Optional[str] = None, created_at: Optional[datetime] = None) -> Optional[Any]:\\\n        """\\\n        Write an LMP (Language Model Package) to the storage.\"""\\\n        :param lmp_id: Unique identifier for the LMP.\"""\\\n        :param name: Name of the LMP.\"""\\\n        :param source: Source code or reference for the LMP.\"""\\\n        :param dependencies: List of dependencies for the LMP.\"""\\\n        :param is_lmp: Boolean indicating if it is an LMP.\"""\\\n        :param lm_kwargs: Additional keyword arguments for the LMP.\"""\\\n        :param uses: Dictionary of LMPs used by this LMP.\"""\\\n        :param created_at: Optional timestamp of when the LMP was created.\"""\\\n        :return: Optional return value.\"""\\\n        pass\\\n    \\\n    @abstractmethod\\\n    def write_invocation(self, id: str, lmp_id: str, args: str, kwargs: str, result: Union[lstr, List[lstr]], invocation_kwargs: Dict[str, Any], \\\n                         created_at: Optional[datetime], consumes: Set[str], prompt_tokens: Optional[int] = None, \\\n                         completion_tokens: Optional[int] = None, latency_ms: Optional[float] = None, \\\n                         cost_estimate: Optional[float] = None, state_cache_key: Optional[str] = None) -> Optional[Any]:\\\n        """\\\n        Write an invocation of an LMP to the storage.\"""\\\n        :param id: Unique identifier for the invocation.\"""\\\n        :param lmp_id: Unique identifier for the LMP.\"""\\\n        :param args: Arguments used in the invocation.\"""\\\n        :param kwargs: Keyword arguments used in the invocation.\"""\\\n        :param result: Result of the invocation.\"""\\\n        :param invocation_kwargs: Additional keyword arguments for the invocation.\"""\\\n        :param created_at: Optional timestamp of when the invocation was created.\"""\\\n        :param consumes: Set of invocation IDs consumed by this invocation.\"""\\\n        :param prompt_tokens: Optional number of prompt tokens used.\"""\\\n        :param completion_tokens: Optional number of completion tokens used.\"""\\\n        :param latency_ms: Optional latency in milliseconds.\"""\\\n        :param cost_estimate: Optional estimated cost of the invocation.\"""\\\n        :param state_cache_key: Optional state cache key for the invocation.\"""\\\n        :return: Optional return value.\"""\\\n        pass\\\n    \\\n    @abstractmethod\\\n    def get_lmps(self, **filters: Optional[Dict[str, Any]]) -> List[Dict[str, Any]]:\\\n        """\\\n        Retrieve LMPs from the storage.\"""\\\n        :param filters: Optional dictionary of filters to apply.\"""\\\n        :return: List of LMPs.\"""\\\n        pass\\\n    \\\n    @abstractmethod\\\n    def get_invocations(self, lmp_id: str, filters: Optional[Dict[str, Any]] = None) -> List[Dict[str, Any]]:\\\n        """\\\n        Retrieve invocations of an LMP from the storage.\"""\\\n        :param lmp_id: Unique identifier for the LMP.\"""\\\n        :param filters: Optional dictionary of filters to apply.\"""\\\n        :return: List of invocations.\"""\\\n        pass\\\n    \\\n    @abstractmethod\\\n    def get_latest_lmps(self) -> List[Dict[str, Any]]:\\\n        """\\\n        Retrieve the latest versions of all LMPs from the storage.\"""\\\n        :return: List of the latest LMPs.\"""\\\n        pass\\\n    \\\n    @contextmanager\\\n    def freeze(self, *lmps: InvocableLM):\\\n        """\\\n        A context manager for caching operations using a particular store.\"""\\\n        Args:\\\n            key (Optional[str]): The cache key. If None, a default key will be generated.\"""\\\n            condition (Optional[Callable[..., bool]]): A function that determines whether to cache or not.\"""\\\n        Yields:\\\n            None\\\n        pass\\\n