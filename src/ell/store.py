from abc import ABC, abstractmethod\nfrom contextlib import contextmanager\nfrom datetime import datetime\nfrom typing import Any, Optional, Dict, List, Set, Union\nfrom ell._lstr import _lstr\nfrom ell.types import SerializedLMP, Invocation\nfrom ell.types.message import InvocableLM\n\nclass Store(ABC):\n    """\n    Abstract base class for serializers. Defines the interface for serializing and deserializing LMPs and invocations.\n    """\n\n    def __init__(self, has_blob_storage: bool = False):\n        self.has_blob_storage = has_blob_storage\n\n    @abstractmethod\n    def write_lmp(self, serialized_lmp: SerializedLMP, uses: Dict[str, Any]) -> Optional[Any]:\n        """\n        Write an LMP (Language Model Package) to the storage.\n\n        :param serialized_lmp: SerializedLMP object containing all LMP details.\n        :param uses: Dictionary of LMPs used by this LMP.\n        :return: Optional return value.\n        """\n        pass\n\n    @abstractmethod\n    def write_invocation(self, invocation: Invocation,  consumes: Set[str]) -> Optional[Any]:\n        """\n        Write an invocation of an LMP to the storage.\n\n        :param invocation: Invocation object containing all invocation details.\n        :param consumes: Set of invocation IDs consumed by this invocation.\n        :return: Optional return value.\n        """\n        pass\n\n    @abstractmethod\n    def get_cached_invocations(self, lmp_id :str, state_cache_key :str) -> List[Invocation]:\n        """\n        Get cached invocations for a given LMP and state cache key.\n        """\n        pass\n\n    @abstractmethod\n    def get_versions_by_fqn(self, fqn :str) -> List[SerializedLMP]:\n        """\n        Get all versions of an LMP by its fully qualified name.\n        """\n        pass\n\n    @contextmanager\n    def freeze(self, *lmps: InvocableLM):\n        """\n        A context manager for caching operations using a particular store.\n\n        Args:\n            *lmps: InvocableLM objects to freeze.\n\n        Yields:\n            None\n        """\n        old_cache_values = {}\n        try:\n            for lmp in lmps:\n                old_cache_values[lmp] = getattr(lmp, '__ell_use_cache__', None)\n                setattr(lmp, '__ell_use_cache__', self)\n            yield\n        finally:\n            for lmp in lmps:\n                if lmp in old_cache_values:\n                    setattr(lmp, '__ell_use_cache__', old_cache_values[lmp])\n                else:\n                    delattr(lmp, '__ell_use_cache__')\n