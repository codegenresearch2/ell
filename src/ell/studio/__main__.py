import os\nimport uvicorn\nfrom argparse import ArgumentParser\nfrom ell.studio.data_server import create_app\nfrom fastapi.staticfiles import StaticFiles\nfrom fastapi.responses import FileResponse\nfrom watchfiles import run_process\nimport logging\n\n# Configure logging\nlogging.basicConfig(level=logging.DEBUG)\nlogger = logging.getLogger(__name__)\n\ndef main():\n    parser = ArgumentParser(description='ELL Studio Data Server')\n    parser.add_argument('--storage-dir', default=os.getcwd(),\n                        help='Directory for filesystem serializer storage (default: current directory)')\n    parser.add_argument('--host', default='127.0.0.1', help='Host to run the server on')\n    parser.add_argument('--port', type=int, default=8080, help='Port to run the server on')\n    parser.add_argument('--dev', action='store_true', help='Run in development mode')\n    args = parser.parse_args()\n\n    app = create_app(args.storage_dir)\n\n    if not args.dev:\n        # In production mode, serve the built React app\n        static_dir = os.path.join(os.path.dirname(__file__), 'static')\n        app.mount('/', StaticFiles(directory=static_dir, html=True), name='static')\n\n        @app.get('/{full_path:path}')\n        async def serve_react_app(full_path: str):\n            return FileResponse(os.path.join(static_dir, 'index.html'))\n\n    # Add WebSocket support for real-time communication\n    from fastapi.websockets import WebSocket, WebSocketDisconnect\n\n    class ConnectionManager:\n        def __init__(self):\n            self.active_connections = []\n\n        async def connect(self, websocket: WebSocket):\n            await websocket.accept()\n            self.active_connections.append(websocket)\n\n        async def disconnect(self, websocket: WebSocket):\n            self.active_connections.remove(websocket)\n\n        async def send_personal_message(self, message: str, websocket: WebSocket):\n            await websocket.send_text(message)\n\n        async def broadcast(self, message: str):\n            for connection in self.active_connections:\n                await connection.send_text(message)\n\n    manager = ConnectionManager()\n\n    @app.websocket('/ws')\n    async def websocket_endpoint(websocket: WebSocket):\n        await manager.connect(websocket)\n        try:\n            while True:\n                data = await websocket.receive_text()\n                await manager.broadcast(f'Client said: {data}') # Log filters for debugging purposes\n        except WebSocketDisconnect:\n            manager.disconnect(websocket)\n            await manager.broadcast(f'Client disconnected')\n\n    # In production mode, run without auto-reloading\n    uvicorn.run(app, host=args.host, port=args.port)\n\nif __name__ == '__main__':\n    main()