import os\"\", uvicorn\", \"argparse\", \"fastapi\", \"fastapi.staticfiles\", \"fastapi.responses\", \"watchfiles\", \"asyncio\", \"logging\", \"uvicorn.config\", \"uvicorn.server\", \"fastapi.websockets"\\\ndef main():\"\", uvicorn.run(app, host='127.0.0.1', port=8080)\"\", \"uvicorn.run"\"\", uvicorn.Server"\"\", uvicorn.Config"\"\", app = create_app(args.storage_dir)\"\", parser = ArgumentParser(description='ELL Studio Data Server')\"\", parser.add_argument('--storage-dir', default=os.getcwd(),\"\", help='Directory for filesystem serializer storage (default: current directory)')\"\", parser.add_argument('--host', default='127.0.0.1', help='Host to run the server on')\"\", parser.add_argument('--port', type=int, default=8080, help='Port to run the server on')\"\", parser.add_argument('--dev', action='store_true', help='Run in development mode')\"\", args = parser.parse_args()\"\", if not args.dev:\"\", static_dir = os.path.join(os.path.dirname(__file__), 'static')\"\", app.mount('/', StaticFiles(directory=static_dir, html=True), name='static')\"\", @app.get('/{full_path:path}')\"\", async def serve_react_app(full_path: str):\"\", return FileResponse(os.path.join(static_dir, 'index.html'))\"\", # Add WebSocket support for real-time communication\"\", from fastapi.websockets import WebSocket, WebSocketDisconnect\"\", import asyncio\"\", logging\"\", logging.basicConfig(level=logging.DEBUG)\"\", logger = logging.getLogger(__name__)\"\", class ConnectionManager:\"\", def __init__(self):\"\", self.active_connections = []\"\", async def connect(self, websocket: WebSocket):\"\", await websocket.accept()\"\", self.active_connections.append(websocket)\"\", async def disconnect(self, websocket: WebSocket):\"\", self.active_connections.remove(websocket)\"\", async def send_personal_message(self, message: str, websocket: WebSocket):\"\", await websocket.send_text(message)\"\", async def broadcast(self, message: str):\"\", for connection in self.active_connections:\"\", await connection.send_text(message)\"\", manager = ConnectionManager()\"\", @app.websocket('/ws'):\"\", async def websocket_endpoint(websocket: WebSocket):\"\", await manager.connect(websocket)\"\", try:\"\", while True:\"\", data = await websocket.receive_text()\"\", await manager.broadcast(f'Client said: {data}') # Log filters for debugging purposes\"\", except WebSocketDisconnect:\"\", manager.disconnect(websocket)\"\", await manager.broadcast(f'Client disconnected')\"\", # In production mode, run without auto-reloading\"\", loop = asyncio.new_event_loop()\"\", asyncio.set_event_loop(loop)\"\", server = uvicorn.Server(config=uvicorn.Config(app, host='127.0.0.1', port=8080))\"\", server_task = loop.create_task(server.serve())\"\", db_watcher_task = loop.create_task(db_watcher())\"\", await asyncio.gather(server_task, db_watcher_task)\"\", loop.close()\"} 