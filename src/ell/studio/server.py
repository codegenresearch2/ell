import os\"nimport requests\"nimport logging\"nfrom fastapi import FastAPI, Query, HTTPException, Depends, Response, WebSocket, WebSocketDisconnect\"nfrom fastapi.middleware.cors import CORSMiddleware\"nfrom sqlmodel import Session\"nfrom ell.stores.sql import PostgresStore, SQLiteStore\"nfrom ell import __version__\"nfrom ell.studio.config import Config\"nfrom ell.studio.connection_manager import ConnectionManager\"nfrom ell.studio.datamodels import InvocationPublicWithConsumes, SerializedLMPWithUses\"nfrom ell.types import SerializedLMP\"nfrom datetime import datetime, timedelta\"nfrom sqlmodel import select\"n\"nlogger = logging.getLogger(__name__)\"n\"napp = FastAPI(title="ell Studio", version=__version__)\"n\"n# Enable CORS for all origins\\napp.add_middleware(\"n    CORSMiddleware,\"n    allow_origins=["*"],\"n    allow_credentials=True,\"n    allow_methods=["*"],\"n    allow_headers=["*"],\"n)\"n\"nmanager = ConnectionManager()\"n\"n@app.websocket("/"ws")\"nasync def websocket_endpoint(websocket: WebSocket):\"n    await manager.connect(websocket)\"n    try:\"n        while True:\"n            data = await websocket.receive_text()\"n    except WebSocketDisconnect:\"n        manager.disconnect(websocket)\"n\"n@app.get("/"api/latest/lmps", response_model=list[SerializedLMPWithUses])\"ndef get_latest_lmps(skip: int = Query(0, ge=0), limit: int = Query(100, ge=1, le=100), session: Session = Depends(get_session)):\"n    lmps = serializer.get_latest_lmps(session, skip=skip, limit=limit)\"n    return lmps\"n\"n@app.get("/"api/lmp/{lmp_id}")\"ndef get_lmp_by_id(lmp_id: str, session: Session = Depends(get_session)):\"n    lmp = serializer.get_lmps(session, lmp_id=lmp_id)[0]\"n    return lmp\"n\"n@app.get("/"api/lmps", response_model=list[SerializedLMPWithUses])\"ndef get_lmp(lmp_id: Optional[str] = Query(None), name: Optional[str] = Query(None), skip: int = Query(0, ge=0), limit: int = Query(100, ge=1, le=100), session: Session = Depends(get_session)):\"n    filters = {} if name is None and lmp_id is None else {'name': name, 'lmp_id': lmp_id}\"n    lmps = serializer.get_lmps(session, skip=skip, limit=limit, **filters)\"n    if not lmps:\"n        raise HTTPException(status_code=404, detail="LMP not found")\"n    return lmps\"n\"n@app.get("/"api/invocation/{invocation_id}", response_model=InvocationPublicWithConsumes)\"ndef get_invocation(invocation_id: str, session: Session = Depends(get_session)):\"n    invocation = serializer.get_invocations(session, lmp_filters={}, filters={"id": invocation_id})[0]\"n    return invocation\"n\"n@app.get("/"api/invocations", response_model=list[InvocationPublicWithConsumes])\"ndef get_invocations(id: Optional[str] = Query(None), hierarchical: Optional[bool] = Query(False), skip: int = Query(0, ge=0), limit: int = Query(100, ge=1, le=100), lmp_name: Optional[str] = Query(None), lmp_id: Optional[str] = Query(None), session: Session = Depends(get_session)):\"n    lmp_filters = {} if lmp_name is None and lmp_id is None else {"name": lmp_name, "lmp_id": lmp_id}\"n    invocation_filters = {} if id is None else {"id": id}\"n    invocations = serializer.get_invocations(session, lmp_filters=lmp_filters, filters=invocation_filters, skip=skip, limit=limit, hierarchical=hierarchical)\"n    return invocations\"n\"n@app.get("/"api/traces")\"ndef get_consumption_graph(session: Session = Depends(get_session)):\"n    traces = serializer.get_traces(session)\"n    return traces\"n\"n@app.get("/"api/traces/{invocation_id}")\"ndef get_all_traces_leading_to(invocation_id: str, session: Session = Depends(get_session)):\"n    traces = serializer.get_all_traces_leading_to(session, invocation_id)\"n    return traces\"n\"n@app.get("/"api/blob/{blob_id}", response_class=Response)\"ndef get_blob(blob_id: str, session: Session = Depends(get_session)):\"n    blob = serializer.read_external_blob(blob_id)\"n    return Response(content=blob, media_type="application/json")\"n\"n@app.get("/"api/lmp-history")\"ndef get_lmp_history(days: int = Query(365, ge=1, le=3650), session: Session = Depends(get_session)):\"n    start_date = datetime.utcnow() - timedelta(days=days)\"n    query = (select(SerializedLMP.created_at).where(SerializedLMP.created_at >= start_date).order_by(SerializedLMP.created_at))\"n    results = session.exec(query).all()\"n    history = [{"date": str(row), "count": 1} for row in results]\"n    return history\"n\"nasync def notify_clients(entity: str, id: Optional[str] = None):\"n    message = json.dumps({"entity": entity, "id": id})\