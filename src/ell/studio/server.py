from fastapi import FastAPI, HTTPException, Depends, WebSocket, WebSocketDisconnect\"nfrom sqlmodel import SQLModel, Session, select\"nfrom typing import Optional, List, Dict, Any\"nimport logging\"nfrom ell.stores.sql import PostgresStore, SQLiteStore\"nfrom ell import __version__\"nfrom fastapi.middleware.cors import CORSMiddleware\"nfrom ell.studio.config import Config\"nfrom ell.studio.connection_manager import ConnectionManager\"nfrom ell.studio.datamodels import InvocationPublicWithConsumes, SerializedLMPWithUses\"nfrom ell.types import SerializedLMP\"nfrom datetime import datetime, timedelta\"nimport json\"n\"nlogger = logging.getLogger(__name__)\"n\"n\"napp = FastAPI(title="ell Studio", version=__version__)\"n\"n# Enable CORS for all origins\"napp.add_middleware(\"n    CORSMiddleware,\"n    allow_origins=["*"],\"n    allow_credentials=True,\"n    allow_methods=["*"],\"n    allow_headers=["*"],\"n)\"n\"nmanager = ConnectionManager()\"n\"n# WebSocket endpoint\"n@app.websocket("/"ws")\"nasync def websocket_endpoint(websocket: WebSocket):\"n    await manager.connect(websocket)\"n    try:\"n        while True:\"n            data = await websocket.receive_text()\"n            # Handle incoming WebSocket messages if needed\"n    except WebSocketDisconnect:\"n        manager.disconnect(websocket)\"n\"n# API endpoint to get latest LMPs\"n@app.get("/"api/latest/lmps"", response_model=List[SerializedLMPWithUses])\"ndef get_latest_lmps(\"n    skip: int = Query(0, ge=0),\"n    limit: int = Query(100, ge=1, le=100),\"n    session: Session = Depends(get_session),\"n):\"n    lmps = serializer.get_latest_lmps(\"n        session,\"n        skip=skip, limit=limit,\"n    )\"n    return lmps\"n\"n# Additional API endpoints as needed...\"n"