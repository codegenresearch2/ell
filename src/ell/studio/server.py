import os"nimport requests"nimport logging"nfrom fastapi import FastAPI, Query, HTTPException, Depends, Response, WebSocket, WebSocketDisconnect"nfrom fastapi.middleware.cors import CORSMiddleware"nfrom sqlmodel import Session"nfrom ell.stores.sql import PostgresStore, SQLiteStore"nfrom ell import __version__"nfrom ell.studio.config import Config"nfrom ell.studio.connection_manager import ConnectionManager"nfrom ell.studio.datamodels import InvocationPublicWithConsumes, SerializedLMPWithUses"nfrom ell.types import SerializedLMP"nfrom datetime import datetime, timedelta"nfrom sqlmodel import select"n"nlogger = logging.getLogger(__name__)"n"napp = FastAPI(title="ell Studio", version=__version__)"n"n# Enable CORS for all origins\napp.add_middleware("n    CORSMiddleware,"n    allow_origins=["*"],"n    allow_credentials=True,"n    allow_methods=["*"],"n    allow_headers=["*"],"n)"n"nmanager = ConnectionManager()"n"n@app.websocket("/"ws")"nasync def websocket_endpoint(websocket: WebSocket):"n    await manager.connect(websocket)"n    try:"n        while True:"n            data = await websocket.receive_text()"n    except WebSocketDisconnect:"n        manager.disconnect(websocket)"n"n# Function to create the FastAPI app\ndef create_app(config: Config):"n    serializer = get_serializer(config)"n"n    def get_session():"n        with Session(serializer.engine) as session:"n            yield session"n"n    app = FastAPI(title="ell Studio", version=__version__)"n"n    # Enable CORS for all origins\n    app.add_middleware("n        CORSMiddleware,"n        allow_origins=["*"],"n        allow_credentials=True,"n        allow_methods=["*"],"n        allow_headers=["*"],"n    )"n"n    manager = ConnectionManager()"n"n    @app.websocket("/"ws")"n    async def websocket_endpoint(websocket: WebSocket):"n        await manager.connect(websocket)"n        try:"n            while True:"n                data = await websocket.receive_text()"n        except WebSocketDisconnect:"n            manager.disconnect(websocket)"n"n    @app.get("/"api/latest/lmps", response_model=list[SerializedLMPWithUses])"n    def get_latest_lmps(skip: int = Query(0, ge=0), limit: int = Query(100, ge=1, le=100), session: Session = Depends(get_session)):"n        lmps = serializer.get_latest_lmps(session, skip=skip, limit=limit)"n        return lmps"n"n    @app.get("/"api/lmp/{lmp_id}")"n    def get_lmp_by_id(lmp_id: str, session: Session = Depends(get_session)):"n        lmp = serializer.get_lmps(session, lmp_id=lmp_id)[0]"n        if not lmp:"n            raise HTTPException(status_code=404, detail="LMP not found")"n        return lmp"n"n    # Define other endpoints similarly..."n"n    return app"n