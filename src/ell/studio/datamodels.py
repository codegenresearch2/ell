from datetime import datetime\nfrom typing import List, Optional, Dict, Any\nfrom sqlmodel import SQLModel\nfrom ell.types import SerializedLMPBase, InvocationBase, SerializedLStrBase\n\nclass SerializedLMPPublic(SerializedLMPBase):\n    pass\nclass SerializedLMPWithUses(SerializedLMPPublic):\n    uses: List["SerializedLMPPublic"]\n\nclass SerializedLMPCreate(SerializedLMPBase):\n    pass\n\nclass SerializedLMPUpdate(SQLModel):\n    name: Optional[str] = None\n    source: Optional[str] = None\n    dependencies: Optional[str] = None\n    is_lm: Optional[bool] = None\n    lm_kwargs: Optional[Dict[str, Any]] = None\n    initial_free_vars: Optional[Dict[str, Any]] = None\n    initial_global_vars: Optional[Dict[str, Any]] = None\n    commit_message: Optional[str] = None\n    version_number: Optional[int] = None\n\nclass InvocationPublic(InvocationBase):\n    lmp: SerializedLMPPublic\n    results: List[SerializedLStrBase]\n    consumes: List[str]\n    consumed_by: List[str]\n    uses: List[str]\n\nclass InvocationCreate(InvocationBase):\n    pass\n\nclass InvocationUpdate(SQLModel):\n    args: Optional[List[Any]] = None\n    kwargs: Optional[Dict[str, Any]] = None\n    global_vars: Optional[Dict[str, Any]] = None\n    free_vars: Optional[Dict[str, Any]] = None\n    latency_ms: Optional[float] = None\n    prompt_tokens: Optional[int] = None\n    completion_tokens: Optional[int] = None\n    state_cache_key: Optional[str] = None\n    invocation_kwargs: Optional[Dict[str, Any]] = None\n\nclass SerializedLStrPublic(SerializedLStrBase):\n    pass\n\nclass SerializedLStrCreate(SerializedLStrBase):\n    pass\n\nclass SerializedLStrUpdate(SQLModel):\n    content: Optional[str] = None\n    logits: Optional[List[float]] = None