from datetime import datetime\nfrom typing import Optional, Dict, Any, List\nfrom ell.stores.sql import SQLiteStore\nfrom ell import __version__\nfrom fastapi import FastAPI, Query, HTTPException, Depends\nfrom fastapi.middleware.cors import CORSMiddleware\nimport os\nimport logging\n\nlogger = logging.getLogger(__name__)\n\n\ndef create_app(storage_dir: Optional[str] = None):\n    storage_path = storage_dir or os.environ.get("ELL_STORAGE_DIR") or os.getcwd()\n    assert storage_path, "ELL_STORAGE_DIR must be set"\n    serializer = SQLiteStore(storage_path)\n\n    app = FastAPI(title="ELL Studio", version=__version__)\n\n    # Enable CORS for all origins\n    app.add_middleware(\n        CORSMiddleware,\n        allow_origins=["*"],\n        allow_credentials=True,\n        allow_methods=["*"],\n        allow_headers=["*"],\n    )\n\n    @app.get("/api/lmps")\n    def get_lmps(skip: int = Query(0, ge=0), limit: int = Query(100, ge=1, le=100)):\n        lmps = serializer.get_lmps(skip=skip, limit=limit)\n        return lmps\n\n    @app.get("/api/latest/lmps")\n    def get_latest_lmps(skip: int = Query(0, ge=0), limit: int = Query(100, ge=1, le=100)):\n        lmps = serializer.get_latest_lmps(skip=skip, limit=limit)\n        return lmps\n\n    @app.get("/api/lmp/{lmp_id}")\n    def get_lmp_by_id(lmp_id: str):\n        lmp = serializer.get_lmps(lmp_id=lmp_id)[0]\n        return lmp\n\n    @app.get("/api/lmps")\n    def get_lmp(lmp_id: Optional[str] = Query(None), name: Optional[str] = Query(None), skip: int = Query(0, ge=0), limit: int = Query(100, ge=1, le=100)):\n        filters = {}\n        if name:\n            filters['name'] = name\n        if lmp_id:\n            filters['lmp_id'] = lmp_id\n\n        lmps = serializer.get_lmps(skip=skip, limit=limit, **filters)\n        if not lmps:\n            raise HTTPException(status_code=404, detail="LMP not found")\n        return lmps\n\n    @app.get("/api/invocation/{invocation_id}")\n    def get_invocation(invocation_id: str):\n        invocation = serializer.get_invocations(id=invocation_id)[0]\n        return invocation\n\n    @app.get("/api/invocations")\n    def get_invocations(id: Optional[str] = Query(None), skip: int = Query(0, ge=0), limit: int = Query(100, ge=1, le=100), lmp_name: Optional[str] = Query(None), lmp_id: Optional[str] = Query(None)):\n        lmp_filters = {}\n        if lmp_name:\n            lmp_filters['name'] = lmp_name\n        if lmp_id:\n            lmp_filters['lmp_id'] = lmp_id\n\n        invocation_filters = {}\n        if id:\n            invocation_filters['id'] = id\n\n        invocations = serializer.get_invocations(lmp_filters=lmp_filters, filters=invocation_filters, skip=skip, limit=limit)\n        return invocations\n\n    @app.post("/api/invocations/search")\n    def search_invocations(q: str = Query(...), skip: int = Query(0, ge=0), limit: int = Query(100, ge=1, le=100)):\n        invocations = serializer.search_invocations(q, skip=skip, limit=limit)\n        return invocations\n\n    @app.get("/api/traces")\n    def get_consumption_graph():\n        traces = serializer.get_traces()\n        return traces\n\n    @app.get("/api/traces/{invocation_id}")\n    def get_all_traces_leading_to(invocation_id: str):\n        traces = serializer.get_all_traces_leading_to(invocation_id)\n        return traces\n\n    return app