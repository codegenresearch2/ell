from fastapi import FastAPI, WebSocket, WebSocketDisconnect\\nimport asyncio\\n\\napp = FastAPI()\\n\\n# ConnectionManager class to manage WebSocket connections\\nclass ConnectionManager:\\n    def __init__(self):\\n        self.active_connections = []\\n\\n    async def connect(self, websocket: WebSocket):\\n        await websocket.accept()\\n        self.active_connections.append(websocket)\\n\\n    def disconnect(self, websocket: WebSocket):\\n        self.active_connections.remove(websocket)\\n\\n    async def send_personal_message(self, message: str, websocket: WebSocket):\\n        await websocket.send_text(message)\\n\\n    async def broadcast(self, message: str):\\n        for connection in self.active_connections:\\n            await connection.send_text(message)\\n\\nmanager = ConnectionManager()\\n\\n@app.websocket('/ws/')\\nasync def websocket_endpoint(websocket: WebSocket):\\n    await manager.connect(websocket)\\n    try:\\n        while True:\\n            data = await websocket.receive_text()\\n            await manager.broadcast(f'Client said: {data}')\\n    except WebSocketDisconnect:\\n        manager.disconnect(websocket)\\n        await manager.broadcast(f'Client disconnected')\n