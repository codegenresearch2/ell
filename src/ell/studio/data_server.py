from fastapi import FastAPI, WebSocket, WebSocketDisconnect\"import asyncio\"\nimport logging\nfrom typing import Optional, Dict, Any, List\nfrom fastapi.middleware.cors import CORSMiddleware\nimport os\n\napp = FastAPI()\n\n# Configure logging\nlogging.basicConfig(level=logging.INFO)\nlogger = logging.getLogger(__name__)\n\n# ConnectionManager class to manage WebSocket connections\nclass ConnectionManager:\n    def __init__(self):\n        self.active_connections = []\n\n    async def connect(self, websocket: WebSocket):\n        await websocket.accept()\n        self.active_connections.append(websocket)\n        logger.info('Client connected.')\n\n    def disconnect(self, websocket: WebSocket):\n        self.active_connections.remove(websocket)\n        logger.info('Client disconnected.')\n\n    async def send_personal_message(self, message: str, websocket: WebSocket):\n        await websocket.send_text(message)\n\n    async def broadcast(self, message: str):\n        for connection in self.active_connections:\n            await connection.send_text(message)\n        logger.info(f'Broadcast message sent: {message}')\n\nmanager = ConnectionManager()\n\n# Enable CORS for all origins\napp.add_middleware(\n    CORSMiddleware,\n    allow_origins=['*'],\n    allow_credentials=True,\n    allow_methods=['*'],\n    allow_headers=['*'],\n)\n\n@app.websocket('/ws/')\nasync def websocket_endpoint(websocket: WebSocket):\n    await manager.connect(websocket)\n    try:\n        while True:\n            data = await websocket.receive_text()\n            await manager.broadcast(f'Client said: {data}')\n    except WebSocketDisconnect:\n        manager.disconnect(websocket)\n        await manager.broadcast(f'Client disconnected')\n\n# Function to create the application\ndef create_app(storage_dir: Optional[str] = None):\n    app = FastAPI(title='ELL Studio', version='0.1.0')\n    app.add_middleware(\n        CORSMiddleware,\n        allow_origins=['*'],\n        allow_credentials=True,\n        allow_methods=['*'],\n        allow_headers=['*'],\n    )\n    return app\n\n# Example of expanding the application with more endpoints\n@app.get('/api/lmps')\ndef get_lmps(skip: int = 0, limit: int = 100):\n    # Placeholder for retrieving LMPs\n    return {'lmps': []}\n\n@app.get('/api/latest/lmps')\ndef get_latest_lmps(skip: int = 0, limit: int = 100):\n    # Placeholder for retrieving the latest LMPs\n    return {'lmps': []}\n\n# Example of retrieving invocations\n@app.get('/api/invocations')\ndef get_invocations(id: Optional[str] = None, skip: int = 0, limit: int = 100):\n    # Placeholder for retrieving invocations\n    return {'invocations': []}\n\n# Example of broadcasting messages\n@app.post('/api/broadcast')\ndef broadcast_message(message: str):\n    async def broadcast_async():\n        await manager.broadcast(message)\n    asyncio.run(broadcast_async())\n    return {'status': 'Message broadcasted'}\n