from ell.configurator import config\\nimport openai\\nimport logging\\nimport colorama\\n\\nlogger = logging.getLogger(__name__)\\\\\n\\nclass OpenAIClient:\\\\\n    def __init__(self, base_url=None):\\\\\n        self.client = None\\n        if base_url:\\\\\n            self.register(base_url)\\\\\n    def register(self, base_url):\\\\\n        global client\\n        self.client = openai.Client(base_url=base_url)\\\\\n        try:\\\\\n            response = requests.get(f"{base_url}/api/tags")\\\\\n            response.raise_for_status()\\n            models = response.json().get("models", [])\\\\\n            for model in models:\\\\\n                config.register_model(model["name"], self.client)\\\\\n        except requests.RequestException as e:\\\\\n            logger.error(f"Failed to fetch models from {base_url}: {e}")\\\\\n        except Exception as e:\\\\\n            logger.error(f"An error occurred: {e}")\\\\\n\\nclass OpenAIModels:\\\\\n    def __init__(self, client: OpenAIClient):\\\\\n        self.client = client\\n        self.register_openai_models()\\n    def register_openai_models(self):\\\\\n        model_data = [(\\\\\n            'gpt-4-1106-preview', 'system'),\\n            ('gpt-4-32k-0314', 'openai'),\\n            ('text-embedding-3-large', 'system'),\\n            ('gpt-4-0125-preview', 'system'),\\n            ('babbage-002', 'system'),\\n            ('gpt-4-turbo-preview', 'system'),\\n            ('gpt-4o', 'system'),   \\\n            ('gpt-4o-2024-05-13', 'system'),\\n            ('gpt-4o-mini-2024-07-18', 'system'),\\n            ('gpt-4o-mini', 'system'),\\n            ('gpt-4o-2024-08-06', 'system'),\\n            ('gpt-3.5-turbo-0301', 'openai'),\\n            ('gpt-3.5-turbo-0613', 'openai'),\\n            ('tts-1', 'openai-internal'),\\n            ('gpt-3.5-turbo', 'openai'),\\n            ('gpt-3.5-turbo-16k', 'openai-internal'),   \\\n            ('davinci-002', 'system'),\\n            ('gpt-3.5-turbo-16k-0613', 'openai'),\\n            ('gpt-4-turbo-2024-04-09', 'system'),\\n            ('gpt-3.5-turbo-0125', 'system'),\\n            ('gpt-4-turbo', 'system'),\\n            ('gpt-3.5-turbo-1106', 'system'),\\n            ('gpt-3.5-turbo-instruct-0914', 'system'),\\n            ('gpt-3.5-turbo-instruct', 'system'),\\n            ('gpt-4-0613', 'openai'),\\n            ('gpt-4', 'openai'),\\n            ('gpt-4-0314', 'openai')\\\\\n        ])\\\\\n        for model_id, owned_by in model_data:\\\\\n            self.client.register_model(model_id, owned_by)\\\\\n\\n# Mocking external dependencies for testing\\nclass TestOpenAIModels(unittest.TestCase):\\\\\n    def test_register_openai_models(self):\\\\\n        client = Mock()\\n        models = OpenAIModels(client)\\\\\n        self.assertIsNotNone(models.client)\\\\\n\\nif __name__ == "__main__":\\n    unittest.main()