from ell.configurator import config\nimport openai\nimport logging\nimport colorama\n\nlogger = logging.getLogger(__name__)\\\n\ndef register_openai_models(client: openai.Client):\\\"""\n    Registers OpenAI models using the provided client.\n    \n    Args:\n        client (openai.Client): The OpenAI client instance to use for registration.\n    """\n    model_data = [(\\\"gpt-4-1106-preview\", 'system'),\n                  ('gpt-4-32k-0314', 'openai'),\n                  ('text-embedding-3-large', 'system'),\n                  ('gpt-4-0125-preview', 'system'),\n                  ('babbage-002', 'system'),\n                  ('gpt-4-turbo-preview', 'system'),\n                  ('gpt-4o', 'system'),   \n                  ('gpt-4o-2024-05-13', 'system'),\n                  ('gpt-4o-mini-2024-07-18', 'system'),\n                  ('gpt-4o-mini', 'system'),\n                  ('gpt-4o-2024-08-06', 'system'),\n                  ('gpt-3.5-turbo-0301', 'openai'),\n                  ('gpt-3.5-turbo-0613', 'openai'),\n                  ('tts-1', 'openai-internal'),\n                  ('gpt-3.5-turbo', 'openai'),\n                  ('gpt-3.5-turbo-16k', 'openai-internal'),   \n                  ('davinci-002', 'system'),\n                  ('gpt-3.5-turbo-16k-0613', 'openai'),\n                  ('gpt-4-turbo-2024-04-09', 'system'),\n                  ('gpt-3.5-turbo-0125', 'system'),\n                  ('gpt-4-turbo', 'system'),\n                  ('gpt-3.5-turbo-1106', 'system'),\n                  ('gpt-3.5-turbo-instruct-0914', 'system'),\n                  ('gpt-3.5-turbo-instruct', 'system'),\n                  ('gpt-4-0613', 'openai'),\n                  ('gpt-4', 'openai'),\n                  ('gpt-4-0314', 'openai')]\n    for model_id, owned_by in model_data:\n        config.register_model(model_id, client)\n\ndef initialize_openai_client(base_url=None):\n    try:\n        if base_url:\n            return openai.Client(base_url=base_url)\n        else:\n            return openai.Client()\n    except openai.OpenAIError as e:\n        import os\n        return openai.Client(api_key=os.environ.get("OPENAI_API_KEY", ""))\n\n# Initialize the default client\ndefault_client = initialize_openai_client()\nregister_openai_models(default_client)\nconfig._default_openai_client = default_client\n\n# Example usage of the OpenAI API\n# openai.chat.completions.create(model="gpt-4o-2024-08-06", messages=[{\"role\": \"system\", \"content\": \"You are a helpful assistant.\"}])\n